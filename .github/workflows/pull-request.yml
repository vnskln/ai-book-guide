name: CI Workflow

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Run linting
        run: npm run lint

  test:
    name: Unit Tests
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Run tests with coverage
        id: coverage
        run: |
          npm run test:coverage
          echo "COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')" >> $GITHUB_OUTPUT

  status-comment:
    name: PR Status Comment
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && always()
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Create Status Comment
        uses: actions/github-script@v7
        with:
          script: |
            console.log(`Context Repo Owner: ${context.repo.owner}`);
            console.log(`Context Repo Name: ${context.repo.repo}`);
            console.log(`Full context.repo object: ${JSON.stringify(context.repo)}`);
            console.log(`GITHUB_REPOSITORY environment variable: ${process.env.GITHUB_REPOSITORY}`);

            const lintStatus = '${{ needs.lint.result }}';
            const testStatus = '${{ needs.test.result }}';
            const coverage = '${{ needs.test.outputs.COVERAGE }}';
            
            const statusEmoji = {
              success: '‚úÖ',
              failure: '‚ùå',
              cancelled: '‚ö™',
              skipped: '‚è≠Ô∏è'
            };
            
            const comment = [
              '### Pull Request Check Results',
              '',
              `${statusEmoji[lintStatus] || '‚ùì'} **Lint:** ${lintStatus}`,
              `${statusEmoji[testStatus] || '‚ùì'} **Tests:** ${testStatus}`,
              coverage ? `\nüìä **Coverage:** ${coverage}%` : '',
              '',
              '_This comment was automatically generated by GitHub Actions_'
            ].join('\n');
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            }); 